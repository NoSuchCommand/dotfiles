#!/bin/bash

# From within a local git clone, takes a file as an argument
# and prints the web link to that file on the GitHub/GitLab WebUI
cmdname=${0##*/}
gitroot=$(git rev-parse --show-toplevel)
gitbranch=$(git branch --show-current)
permalink=0
remotename=origin

function print_usage {
    echo "Usage: ${cmdname/-/ } [-b <branch>] [-p] <filepath>..."
    echo
    echo "  -b <branch> : get URL for this branch instead of the current one"
    echo "  -r <remote> : get URL for this remote instead of origin"
    echo "  -p          : get a permalink"
}

while getopts :b:r:p c; do
    case "$c" in
        b)
            gitbranch="$OPTARG"
        ;;
        r)
            git remote | grep -q "$OPTARG" || {
                echo "No such remote: $OPTARG"
                exit 1
            }
            remotename="$OPTARG"
        ;;
        p)
            permalink=1
        ;;
        '?')
            echo "Unsupported option : -$OPTARG"
            exit 1
        ;;
    esac
done
shift $((OPTIND - 1))

(( $# < 1 )) && {
    print_usage
    exit 1
}

if [[ $permalink == 1 ]]; then
    gitbranch=$(git rev-parse $gitbranch)
fi

repo=$(
    git remote -v |
    awk -v remotename="$remotename" \
        '$0 ~ sprintf("^%s[[:space:]].*(fetch)", remotename) {
            sub("\\.git$", "", $2);
            if ($2 ~ /^git@/) {
                sub(":", "/", $2);
                sub("git@", "https://", $2);
            } else {
                sub("[^/]*@", "", $2);
            }
            print $2;
        }'
)

for pathspec in "$@"; do
    file=$(realpath "$pathspec")
    gitfile=${file#${gitroot}/}
    printf "%s/blob/%s/%s\n" "$repo" "$gitbranch" "$gitfile"
done
