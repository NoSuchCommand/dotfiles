#!/bin/bash

cmdname=${0##*/}
push=0

declare -a preferred_branches=(
    develop
    master
    main
)
for pbranch in "${preferred_branches[@]}"; do
    onto=$(
        git for-each-ref --format='%(refname:short)' "refs/heads/$pbranch" |
        head -1
    )
    [[ -n $onto ]] && break
done

function print_usage {
    echo "Usage: ${cmdname/-/ } [-o <onto>] [-p] <branch>..."
    echo
    echo "  -o <onto> : branch to rebase onto (defaults to '$onto')"
    echo "  -p        : force-push after rebasing"
}

while getopts :o:p c; do
    case "$c" in
        o)
            onto="$OPTARG"
        ;;
        p)
            push=1
        ;;
        '?')
            echo "Unsupported option : -$OPTARG"
            exit 1
        ;;
    esac
done
shift $((OPTIND - 1))

(( $# < 1 )) && {
    print_usage
    exit 1
}

starting_branch=$(git symbolic-ref -q --short HEAD)

if git checkout -q - &>/dev/null; then
    previous_branch=$(git symbolic-ref -q --short HEAD)
    git checkout -q -
fi

if [[ -z "$starting_branch" ]]; then
    echo "You must start from the HEAD of a named branch."
    echo "Aborting..."
fi

for branch in "$@"; do
    echo ==========================
    echo     Processing $branch
    echo ==========================
    git checkout -q "$branch" || {
        continue
    }
    git rebase "$onto" 2> /dev/null || {
        echo "Error: rebasing $branch"
        git rebase --abort
        continue
    }
    if [[ $push == 1 ]]; then
        git push --force
    fi
done

if [[ -n "$previous_branch" ]]; then
    git checkout -q "$previous_branch"
fi
git checkout -q "$starting_branch"
